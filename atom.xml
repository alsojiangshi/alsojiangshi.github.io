<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alsojiangshi</title>
  
  
  <link href="https://alsojiangshi.github.io/atom.xml" rel="self"/>
  
  <link href="https://alsojiangshi.github.io/"/>
  <updated>2025-09-20T12:09:20.857Z</updated>
  <id>https://alsojiangshi.github.io/</id>
  
  <author>
    <name>Alsojiangshi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Docker 快速部署 Blessing Skin Server</title>
    <link href="https://alsojiangshi.github.io/posts/3/"/>
    <id>https://alsojiangshi.github.io/posts/3/</id>
    <published>2025-09-20T12:01:43.000Z</published>
    <updated>2025-09-20T12:09:20.857Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://media.githubusercontent.com/media/bs-community/logo/main/logo.png" alt="cover"></p><h1 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Blessing Skin 是一款能让您上传、管理和分享您的 Minecraft 皮肤和披风的 Web 应用程序。与修改游戏材质包不同的是，所有人都能在游戏中看到各自的皮肤和披风（当然，前提是玩家们要使用同一个皮肤站）。</p><p>Blessing Skin 是一个开源的 PHP 项目，这意味着您可以自由地在您的服务器上部署它。</p></blockquote><p>本篇教程展示如何使用 <code>docker</code> 快速搭建并上线一个 BSS 皮肤站</p><h1 id="正文"><a href="# 正文" class="headerlink" title="正文"></a>正文 </h1><h2 id="部署容器"><a href="# 部署容器" class="headerlink" title="部署容器"></a> 部署容器 </h2><p> 本教程使用的镜像为非官方镜像<code>feilongproject/blessing-skin-server:6.0.2-1.0.0</code></p><p>首先让我们在宿主机拉取镜像并创建运行容器实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name &lt; 容器名 &gt; \</span><br><span class="line">  -v ./bss_data:/var/www/blessing-skin \</span><br><span class="line">  feilongproject/blessing-skin-server:6.0.2-1.0.0</span><br></pre></td></tr></table></figure><p>这里我填的容器名为<code>alsoskin</code>，挂载到了<code>./bss_data</code>，你填你喜欢的就好。</p><p>如果不进行 <code>-v</code> 挂载，删除容器时你未挂载的数据将会丢失，建议挂载。你也可以像这样分开挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v ./bss_env/.env:/var/www/blessing-skin/.env \</span><br><span class="line">-v ./bss_storage:/var/www/blessing-skin/storage \</span><br><span class="line">-v ./bss_uploads:/var/www/blessing-skin/public/uploads</span><br></pre></td></tr></table></figure><p>将你的容器连接到你能连接的网络里，就可以通过内网地址先进行访问了。</p><p>在这里，我的 PC 和容器都连接到了我提前自定义的 <code>lan</code> 网络，处于同一网段<code>192.168.50.x</code></p><table><thead><tr><th align="center">Name</th><th align="center">IPv4 Address</th></tr></thead><tbody><tr><td align="center">alsoskin</td><td align="center">192.168.50.5</td></tr><tr><td align="center">My PC</td><td align="center">192.168.50.x</td></tr></tbody></table><blockquote><p>[!NOTE]</p><p>如果你没有手动创建 <code>lan</code> 网络，可以用默认的 <code>bridge</code> 网络，或者用 <code>docker network create lan</code> 来新建一个。这个网络我是用来连接我部署了 <code>frp</code> 的容器的。</p></blockquote><p>打开浏览器，在导航栏输入 <code>192.168.50.5</code> 即可访问皮肤站看到欢迎页面</p><p><img src="https://i.loli.net/2020/07/07/WGu1oVlTF6AJOw9.png" alt="welcome"></p><p><del>懒得截图，直接复用官方用户手册的图了，</del>由于镜像的版本是<code>6.0.2</code>，你们看到的不长这样但差不太多。</p><p>接下来按页面提示的做就好。</p><p>在选择数据库处，我选择的是<code>PostgreSQL</code>，因此我使用其镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name &lt; 数据库容器名 &gt; \</span><br><span class="line">  --network &lt; 加入的网络 &gt; \</span><br><span class="line">  -e POSTGRES_USER=&lt; 用户名 &gt; \</span><br><span class="line">  -e POSTGRES_PASSWORD=&lt; 你的密码 &gt; \</span><br><span class="line">  -e POSTGRES_DB=&lt; 数据库名 &gt; \</span><br><span class="line">  -v ./pgdata:/var/lib/postgresql/data \</span><br><span class="line">  postgres:15</span><br></pre></td></tr></table></figure><p>这里我数据库容器名写的是<code>blessing-postgres</code>, 加入的网络是<code>lan</code>, 用户名和数据库名我写的是<code>alsoskin</code>，也就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name blessing-postgres \</span><br><span class="line">  --network lan \</span><br><span class="line">  -e POSTGRES_USER=alsoskin \</span><br><span class="line">  -e POSTGRES_PASSWORD=xxx \</span><br><span class="line">  -e POSTGRES_DB=alsoskin \</span><br><span class="line">  -v ./pgdata:/var/lib/postgresql/data \</span><br><span class="line">  postgres:15</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>如果你 <del> 和我一样 </del> 不熟悉 <code>PostgreSQL</code>，建议用户名和数据库名写成一样的，或者干脆使用别的数据库。注意密码不要包含<code>#</code>、空格、<code>$</code> 等特殊字符，可以先用简单密码，等后面再改</p></blockquote><p>附上刷新配置缓存的命令，你可能会用到的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan config:clear</span><br><span class="line">php artisan cache:clear</span><br></pre></td></tr></table></figure><h2 id="常见配置调整"><a href="# 常见配置调整" class="headerlink" title="常见配置调整"></a>常见配置调整 </h2><h3 id="插件市场链接修改"><a href="# 插件市场链接修改" class="headerlink" title="插件市场链接修改"></a> 插件市场链接修改 </h3><p> 原镜像的插件市场链接可能无法访问，需要修改为目前 <a href="https://github.com/bs-community/blessing-skin-server"> 官方 </a> 的<code>33055ec</code>分支的 <code>/config/plugins.php</code> 里的 <a href="https://github.com/bs-community/blessing-skin-server/blob/33055ecbf97bdef8c5798f48bbfe97535f182b28/config/plugins.php#L36"> 链接</a>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;registry&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(</span><br><span class="line">    <span class="string">&#x27;PLUGINS_REGISTRY&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://bs-plugins.littleservice.cn/registry_&#123;lang&#125;.json&#x27;</span></span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>修改后记得刷新配置缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan config:clear</span><br><span class="line">php artisan cache:clear</span><br></pre></td></tr></table></figure><h3 id="设置 JWT-SECRET"><a href="# 设置 JWT-SECRET" class="headerlink" title="设置 JWT_SECRET"></a>设置 JWT_SECRET</h3><p>参见这句 <a href="https://github.com/bs-community/blessing-skin-server/blob/dev/config/jwt.php#L18"> 提醒</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| JWT Authentication Secret</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Don&#x27;t forget to set this in your .env file, as it will be used to sign</span></span><br><span class="line"><span class="comment">| your tokens. A helper command is provided for this:</span></span><br><span class="line"><span class="comment">| `php artisan jwt:secret`</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Note: This will be used for Symmetric algorithms only (HMAC),</span></span><br><span class="line"><span class="comment">| since RSA and ECDSA use a private/public key combo (See below).</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;secret&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;JWT_SECRET&#x27;</span>),</span><br></pre></td></tr></table></figure><p>默认不添加该字段的话，会导致该值为空，启动器无法登录账号</p><p>我们现在修改 <code>.env</code>，添加<code>JWT_SECRET</code> 字段。</p><p>这是一串随机字符，我们可以通过 Laravel 自带的命令生成并写入 <code>.env</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure><p>也可以手动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -hex 32</span><br></pre></td></tr></table></figure><p>来随机生成一段 32 字节的，然后放到<code>.env</code></p><p>修改 <code>.env</code> 的方法有很多，例如，我们可以通过 <code>cp</code> 将容器中的 <code>.env</code> 拷贝出来到宿主机修改后再拷贝回去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker <span class="built_in">cp</span> &lt; 皮肤站容器名 &gt;:/var/www/blessing-skin/.env ./bssenv</span><br><span class="line">nano bssenv</span><br><span class="line"><span class="comment"># 在末尾换行，添加 JWT_SECRET=&lt; 你的随机字符 &gt;</span></span><br><span class="line"><span class="comment"># Ctrl+O 进行保存，按下 enter 确认</span></span><br><span class="line"><span class="comment"># Ctrl+X 关闭</span></span><br><span class="line"><span class="built_in">sudo</span> docker <span class="built_in">cp</span> ./bssenv &lt; 皮肤站容器名 &gt;:/var/www/blessing-skin/.env</span><br></pre></td></tr></table></figure><p>然后连接进入容器中输入以下命令刷新配置缓存或重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan config:clear</span><br><span class="line">php artisan cache:clear</span><br></pre></td></tr></table></figure><h2 id="外网访问与 https 配置"><a href="# 外网访问与 https 配置" class="headerlink" title="外网访问与 https 配置"></a>外网访问与 https 配置 </h2><p> 要实现外网可以使用 <code>https</code> 访问我们的皮肤站，我们需要 <code>ssl</code> 证书。至于如何让外网能够访问，有很多方法。这里由于我的皮肤站部署在我的本地物理机，使用的是通过 <code>frp</code>，将流量转发到<code>vps</code> 的方法物理机 -<code>vps</code>这一段我使用的是 <code>frp</code> 自带的加密，这里讨论的是外网 -<code>vps</code>的这段。</p><p>我选择 <code>nginx</code> 反向代理 +<code>Let&#39;s Encrypt</code>签发证书</p><p>这个的教程很多，我这里就不再赘述。</p><blockquote><p>[!NOTE]</p><p>如果你打算使用非默认端口 <code>443</code> 进行 <code>https</code> 访问的话：</p><ul><li>记得将 <code>nginx</code> 的配置文件里 <code>ssl</code> 监听端口的那个 <code>443</code> 改为你打算使用的端口</li><li><code>proxy_set_header Host $host;</code>这里，将 <code>$host</code> 改为 <code>$http_host</code>，否则不会将端口传下去，从而导致在试图<code>https</code> 访问皮肤站时，出现“发送了无效的响应 <code>ERR_SSL_PROTOCOL_ERROR</code>”</li></ul></blockquote><h1 id="完成"><a href="# 完成" class="headerlink" title="完成"></a>完成 </h1><p> 至此，一个基本可用的 Blessing Skin Server 就搭建完成了。</p><p>后续可以在管理面板里安装插件、美化主题，或者接入外部认证系统。</p><h2 id="相关链接"><a href="# 相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p> <a href="https://blessing.netlify.app/">Blessing Skin 手册 | Blessing Skin 用户手册</a></p><p><a href="https://blessing.netlify.app/yggdrasil-api/">Yggdrasil API | Blessing Skin 用户手册</a></p><p><a href="https://hub.docker.com/r/feilongproject/blessing-skin-server">feilongproject&#x2F;blessing-skin-server - Docker Image | Docker Hub</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://media.githubusercontent.com/media/bs-community/logo/main/logo.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;# 前言&quot; class=&quot;h</summary>
      
    
    
    
    <category term="Minecraft" scheme="https://alsojiangshi.github.io/categories/Minecraft/"/>
    
    
    <category term="Minecraft" scheme="https://alsojiangshi.github.io/tags/Minecraft/"/>
    
    <category term="Guide" scheme="https://alsojiangshi.github.io/tags/Guide/"/>
    
    <category term="BSS" scheme="https://alsojiangshi.github.io/tags/BSS/"/>
    
    <category term="Docker" scheme="https://alsojiangshi.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Minecraft 纯萌新入坑指南</title>
    <link href="https://alsojiangshi.github.io/posts/2/"/>
    <id>https://alsojiangshi.github.io/posts/2/</id>
    <published>2025-08-12T16:50:21.000Z</published>
    <updated>2025-08-13T15:36:24.347Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.minecraft.net/content/dam/minecraftnet/games/minecraft/key-art/Homepage_Discover-our-games_MC-Vanilla-KeyArt_864x864.jpg" alt="cover"></p><h1 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h1><p> 本篇指南主要针对纯萌新。下面我们将一步步展示如何通过 PCL2 启动器游玩 Minecraft Java 版<br>（国际电脑版）</p><h1 id="正文"><a href="# 正文" class="headerlink" title="正文"></a>正文 </h1><h2 id="Java- 安装"><a href="#Java- 安装" class="headerlink" title="Java 安装"></a>Java 安装</h2><p><strong> 如果你使用 PCL 启动器，或选择了自动下载 java，你可以跳过此章节。</strong></p><p><strong>Java 下载：</strong>请先查看 MC 服务器游戏版本，并下载安装对应版本的 Java：</p><p align="center"><b>推荐使用版本请看相关公告</b></p><p>（以下超链接是官方下载方式）<strong>游戏版本：1.16.5 及以下，请安装 Java8</strong><br>网址：<a href="https://www.oracle.com/cn/java/technologies/downloads/#java8">https://www.oracle.com/cn/java/technologies/downloads/#java8</a><br><img src="https://img.z4a.net/images/2025/08/13/java8.png" alt="java8"></p><p><strong>游戏版本：1.17 至 1.20.4，请安装 Java17</strong></p><p>网址：<a href="https://www.oracle.com/cn/java/technologies/downloads/#java17">https://www.oracle.com/cn/java/technologies/downloads/#java17</a></p><p>选择方式同上</p><p><strong>游戏版本：1.20.5，1.21 以上，请安装 Java21</strong></p><p>网址：<a href="https://www.oracle.com/cn/java/technologies/downloads/#java21">https://www.oracle.com/cn/java/technologies/downloads/#java21</a></p><p>选择方式同上</p><h2 id="启动器下载"><a href="# 启动器下载" class="headerlink" title="启动器下载"></a>启动器下载 </h2><p> 推荐使用<a href="https://afdian.com/p/0164034c016c11ebafcb52540025c377"><strong>PCL2 启动器</strong></a>，下载完成后，请在桌面或某处新建一个文件夹（建议命名为<code>mc</code>），将下载的文件移动到你刚刚在桌面或某处新建的文件夹内。</p><p>现在请打开 <code>Plain Craft Launcher 2.exe</code> 程序，这是游戏的启动器，用来进行游戏的外部配置并打开游戏。每次游玩 Minecraft 时，都需要靠 PCL2 启动 Minecraft。</p><p>打开启动器后可以在 <code> 设置 </code>-<code> 启动 </code>-<code> 游戏 Java</code>中查看本地安装的所有 Java 版本，建议选 <code> 自动选择合适的 Java</code></p><p>建议点击 <code> 设置 </code>，再选择<code> 默认版本隔离 </code>，选择<code> 隔离所有版本 </code>（推荐）或<code> 隔离可按装 Mod 的版本与非正式版</code>。</p><p><img src="https://img.z4a.net/images/2025/08/13/Java.png" alt="游戏 Java"></p><h2 id="安装游戏"><a href="# 安装游戏" class="headerlink" title="安装游戏"></a>安装游戏 </h2><h3 id="玩整合包"><a href="# 玩整合包" class="headerlink" title="玩整合包"></a> 玩整合包 </h3><p> 选择点击 <code> 下载 </code>-<code> 整合包</code>，搜索你喜欢的整合包点击即可下载游玩。</p><h3 id="玩自定义 mod 的游戏版本"><a href="# 玩自定义 mod 的游戏版本" class="headerlink" title="玩自定义 mod 的游戏版本"></a>玩自定义 mod 的游戏版本 </h3><p> 账号设置完之后，我们开始安装游戏本体。<br>请先点击上方的 <code> 下载 </code>，再选择<code> 游戏下载</code></p><p><img src="https://img.z4a.net/images/2025/08/13/74b1b78e06c352f0efc46e1ce548dd7a.png" alt="游戏下载"></p><p>选择你要玩的游戏版本，这里以 <code>1.20.1</code> 为例</p><p><img src="https://img.z4a.net/images/2025/08/13/d799c531ad923d82f42131556ebc0e0e.png" alt="游戏二级下载"></p><p>若要玩原版，直接点击 <code> 开始下载 </code> 即可，若要玩 mod 版，选择点击要玩的 mod 版，这里以 Forge 版为例，点击<code>Forge</code></p><p><img src="https://img.z4a.net/images/2025/08/13/forge.png" alt="forge"></p><p>选择点击你要玩的 forge 版本 (<code> 稳定版 </code> 一般是最末尾号为 <code>0</code> 的版本，例如 <code>forge 47.4.0</code>；<code> 最新版 </code> 即最新版本。考虑到 mod 作者可能没有及时更新导致游玩不稳定性上升，一般来说都是选择 <code> 稳定版</code>，特殊的可能选择某个特定版本，看具体需求)</p><p>点击 <code> 开始下载 </code> 即可下载游戏版本</p><p>PCL2 一般会自动选择你 <strong> 最新下载 </strong> 的或 <strong> 最近游玩 </strong> 的游戏版本，若要切换选择游戏版本，选择 <code> 启动 </code>-<code> 版本选择 </code>，然后选择你想要的版本即可，接下来，就在<code> 下载 </code>-<code>Mod</code> 找你喜欢的 mod 开始游玩吧~(注意 <strong> 游戏版本 </strong>、<strong> 兼容性 </strong>、及<strong> 文件位置</strong>)</p><h2 id="开始游戏"><a href="# 开始游戏" class="headerlink" title="开始游戏"></a>开始游戏 </h2><h3 id="单人游戏"><a href="# 单人游戏" class="headerlink" title="单人游戏"></a> 单人游戏</h3><ol><li><p>点击 <code> 单人游戏</code></p></li><li><p>选择游戏模式（创造 &#x2F; 生存 &#x2F; 极限）</p></li><li><p>点击 <code> 创建新的世界</code></p></li></ol><h3 id="多人游戏"><a href="# 多人游戏" class="headerlink" title="多人游戏"></a>多人游戏 </h3><h4 id="加入服务器 - 别人的游戏"><a href="# 加入服务器 - 别人的游戏" class="headerlink" title="加入服务器 &#x2F; 别人的游戏"></a> 加入服务器 &#x2F; 别人的游戏</h4><ol><li>点击 <code> 多人游戏</code></li><li>点击 <code> 添加服务器</code></li><li>将别人给你的链接 <code>Ctrl</code>+<code>C</code>, <code>Ctrl</code>+<code>V</code> 到<code>服务器地址 </code> 中，点击 <code> 完成</code></li><li>（后续打开只需）在服务器列表，双击已添加的服务器，进入服务器</li></ol><h4 id="别人加入自己的游戏 - 自开服"><a href="# 别人加入自己的游戏 - 自开服" class="headerlink" title="别人加入自己的游戏 &#x2F; 自开服"></a>别人加入自己的游戏 &#x2F; 自开服 </h4><p> 会这个的已经不是纯萌新了，所以只提一下可能的一些方案</p><ol><li>本地开放局域网服务器通过 FRP 转发服务器流量</li><li>直接部署在 VPS</li><li>有公网 ip，直接通过 <code> 公网 ip: 端口 </code> 连接（用手机流量开热点给电脑连接可以让电脑获得一个临时的动态公网 ipv6）</li></ol><h1 id="附录"><a href="# 附录" class="headerlink" title="附录"></a>附录 </h1><p><a href="https://zh.minecraft.wiki/w/Tutorial:%E6%96%B0%E6%89%8B%E6%89%8B%E5%86%8C"> 游戏的基本操作</a></p><h2 id="常用网站"><a href="# 常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><ul><li><a href="https://zh.minecraft.wiki/">Minecraft Wiki</a>: 查找原版 (冷) 知识最可靠的百科</li><li><a href="https://www.mcmod.cn/">MC 百科</a>: 中文模组百科，学习了解各种模组的知识</li><li><a href="https://www.curseforge.com/minecraft">Curseforge</a>: 全球 mc 模组作者、整合包作者发布作品的前线</li><li><a href="https://modrinth.com/">Modrinth</a>: 新兴的 mc 模组、材质、插件下载站</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.minecraft.net/content/dam/minecraftnet/games/minecraft/key-art/Homepage_Discover-our-games_MC-Vanilla-KeyArt_864x86</summary>
      
    
    
    
    <category term="Minecraft" scheme="https://alsojiangshi.github.io/categories/Minecraft/"/>
    
    
    <category term="Minecraft" scheme="https://alsojiangshi.github.io/tags/Minecraft/"/>
    
    <category term="Noob" scheme="https://alsojiangshi.github.io/tags/Noob/"/>
    
    <category term="Guide" scheme="https://alsojiangshi.github.io/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>本站的搭建</title>
    <link href="https://alsojiangshi.github.io/posts/1/"/>
    <id>https://alsojiangshi.github.io/posts/1/</id>
    <published>2025-07-08T10:03:40.118Z</published>
    <updated>2025-07-08T16:16:29.694Z</updated>
    
    <content type="html"><![CDATA[<p> 这是本站的第一篇 blog<br> 本站使用 hexo 框架，参考了 pdpeng 的相关教程 (<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog/">https://pdpeng.github.io/2022/01/19/setup-personal-blog/</a>)</p><p> 感谢 jinyaoMa (<a href="https://github.com/jinyaoMa/">https://github.com/jinyaoMa/</a>) 提供的 mustom 模板供我参考网站设计 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这是本站的第一篇 blog&lt;br&gt; 本站使用 hexo 框架，参考了 pdpeng 的相关教程 (&lt;a href=&quot;https://pdpeng.github.io/2022/01/19/setup-personal-blog/&quot;&gt;https://pdpeng.githu</summary>
      
    
    
    
    
  </entry>
  
</feed>
