{"title":"使用 Docker 快速部署 Blessing Skin Server","slug":"使用 Docker 快速部署 Blessing Skin Server","date":"2025-09-20","updated":"2025-09-20","comments":true,"path":"api/posts/3.json","excerpt":null,"cover":"https://media.githubusercontent.com/media/bs-community/logo/main/logo.png","covers":["https://media.githubusercontent.com/media/bs-community/logo/main/logo.png","https://i.loli.net/2020/07/07/WGu1oVlTF6AJOw9.png"],"content":"<p><img src=\"https://media.githubusercontent.com/media/bs-community/logo/main/logo.png\" alt=\"cover\"></p>\n<h1 id=\"前言\"><a href=\"# 前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Blessing Skin 是一款能让您上传、管理和分享您的 Minecraft 皮肤和披风的 Web 应用程序。与修改游戏材质包不同的是，所有人都能在游戏中看到各自的皮肤和披风（当然，前提是玩家们要使用同一个皮肤站）。</p>\n<p>Blessing Skin 是一个开源的 PHP 项目，这意味着您可以自由地在您的服务器上部署它。</p>\n</blockquote>\n<p>本篇教程展示如何使用 <code>docker</code> 快速搭建并上线一个 BSS 皮肤站</p>\n<h1 id=\"正文\"><a href=\"# 正文\" class=\"headerlink\" title=\"正文\"></a>正文 </h1><h2 id=\"部署容器\"><a href=\"# 部署容器\" class=\"headerlink\" title=\"部署容器\"></a> 部署容器 </h2><p> 本教程使用的镜像为非官方镜像<code>feilongproject/blessing-skin-server:6.0.2-1.0.0</code></p>\n<p>首先让我们在宿主机拉取镜像并创建运行容器实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name &lt; 容器名 &gt; \\</span><br><span class=\"line\">  -v ./bss_data:/var/www/blessing-skin \\</span><br><span class=\"line\">  feilongproject/blessing-skin-server:6.0.2-1.0.0</span><br></pre></td></tr></table></figure>\n\n<p>这里我填的容器名为<code>alsoskin</code>，挂载到了<code>./bss_data</code>，你填你喜欢的就好。</p>\n<p>如果不进行 <code>-v</code> 挂载，删除容器时你未挂载的数据将会丢失，建议挂载。你也可以像这样分开挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-v ./bss_env/.env:/var/www/blessing-skin/.env \\</span><br><span class=\"line\">-v ./bss_storage:/var/www/blessing-skin/storage \\</span><br><span class=\"line\">-v ./bss_uploads:/var/www/blessing-skin/public/uploads</span><br></pre></td></tr></table></figure>\n\n<p>将你的容器连接到你能连接的网络里，就可以通过内网地址先进行访问了。</p>\n<p>在这里，我的 PC 和容器都连接到了我提前自定义的 <code>lan</code> 网络，处于同一网段<code>192.168.50.x</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Name</th>\n<th align=\"center\">IPv4 Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">alsoskin</td>\n<td align=\"center\">192.168.50.5</td>\n</tr>\n<tr>\n<td align=\"center\">My PC</td>\n<td align=\"center\">192.168.50.x</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>[!NOTE]</p>\n<p>如果你没有手动创建 <code>lan</code> 网络，可以用默认的 <code>bridge</code> 网络，或者用 <code>docker network create lan</code> 来新建一个。这个网络我是用来连接我部署了 <code>frp</code> 的容器的。</p>\n</blockquote>\n<p>打开浏览器，在导航栏输入 <code>192.168.50.5</code> 即可访问皮肤站看到欢迎页面</p>\n<p><img src=\"https://i.loli.net/2020/07/07/WGu1oVlTF6AJOw9.png\" alt=\"welcome\"></p>\n<p><del>懒得截图，直接复用官方用户手册的图了，</del>由于镜像的版本是<code>6.0.2</code>，你们看到的不长这样但差不太多。</p>\n<p>接下来按页面提示的做就好。</p>\n<p>在选择数据库处，我选择的是<code>PostgreSQL</code>，因此我使用其镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name &lt; 数据库容器名 &gt; \\</span><br><span class=\"line\">  --network &lt; 加入的网络 &gt; \\</span><br><span class=\"line\">  -e POSTGRES_USER=&lt; 用户名 &gt; \\</span><br><span class=\"line\">  -e POSTGRES_PASSWORD=&lt; 你的密码 &gt; \\</span><br><span class=\"line\">  -e POSTGRES_DB=&lt; 数据库名 &gt; \\</span><br><span class=\"line\">  -v ./pgdata:/var/lib/postgresql/data \\</span><br><span class=\"line\">  postgres:15</span><br></pre></td></tr></table></figure>\n\n<p>这里我数据库容器名写的是<code>blessing-postgres</code>, 加入的网络是<code>lan</code>, 用户名和数据库名我写的是<code>alsoskin</code>，也就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name blessing-postgres \\</span><br><span class=\"line\">  --network lan \\</span><br><span class=\"line\">  -e POSTGRES_USER=alsoskin \\</span><br><span class=\"line\">  -e POSTGRES_PASSWORD=xxx \\</span><br><span class=\"line\">  -e POSTGRES_DB=alsoskin \\</span><br><span class=\"line\">  -v ./pgdata:/var/lib/postgresql/data \\</span><br><span class=\"line\">  postgres:15</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[!NOTE]</p>\n<p>如果你 <del> 和我一样 </del> 不熟悉 <code>PostgreSQL</code>，建议用户名和数据库名写成一样的，或者干脆使用别的数据库。注意密码不要包含<code>#</code>、空格、<code>$</code> 等特殊字符，可以先用简单密码，等后面再改</p>\n</blockquote>\n<p>附上刷新配置缓存的命令，你可能会用到的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan config:clear</span><br><span class=\"line\">php artisan cache:clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见配置调整\"><a href=\"# 常见配置调整\" class=\"headerlink\" title=\"常见配置调整\"></a>常见配置调整 </h2><h3 id=\"插件市场链接修改\"><a href=\"# 插件市场链接修改\" class=\"headerlink\" title=\"插件市场链接修改\"></a> 插件市场链接修改 </h3><p> 原镜像的插件市场链接可能无法访问，需要修改为目前 <a href=\"https://github.com/bs-community/blessing-skin-server\"> 官方 </a> 的<code>33055ec</code>分支的 <code>/config/plugins.php</code> 里的 <a href=\"https://github.com/bs-community/blessing-skin-server/blob/33055ecbf97bdef8c5798f48bbfe97535f182b28/config/plugins.php#L36\"> 链接</a>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;registry&#x27;</span> =&gt; <span class=\"title function_ invoke__\">env</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;PLUGINS_REGISTRY&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://bs-plugins.littleservice.cn/registry_&#123;lang&#125;.json&#x27;</span></span><br><span class=\"line\">),</span><br></pre></td></tr></table></figure>\n\n<p>修改后记得刷新配置缓存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan config:clear</span><br><span class=\"line\">php artisan cache:clear</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置 JWT-SECRET\"><a href=\"# 设置 JWT-SECRET\" class=\"headerlink\" title=\"设置 JWT_SECRET\"></a>设置 JWT_SECRET</h3><p>参见这句 <a href=\"https://github.com/bs-community/blessing-skin-server/blob/dev/config/jwt.php#L18\"> 提醒</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| JWT Authentication Secret</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Don&#x27;t forget to set this in your .env file, as it will be used to sign</span></span><br><span class=\"line\"><span class=\"comment\">| your tokens. A helper command is provided for this:</span></span><br><span class=\"line\"><span class=\"comment\">| `php artisan jwt:secret`</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Note: This will be used for Symmetric algorithms only (HMAC),</span></span><br><span class=\"line\"><span class=\"comment\">| since RSA and ECDSA use a private/public key combo (See below).</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;secret&#x27;</span> =&gt; <span class=\"title function_ invoke__\">env</span>(<span class=\"string\">&#x27;JWT_SECRET&#x27;</span>),</span><br></pre></td></tr></table></figure>\n\n<p>默认不添加该字段的话，会导致该值为空，启动器无法登录账号</p>\n<p>我们现在修改 <code>.env</code>，添加<code>JWT_SECRET</code> 字段。</p>\n<p>这是一串随机字符，我们可以通过 Laravel 自带的命令生成并写入 <code>.env</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan jwt:secret</span><br></pre></td></tr></table></figure>\n\n<p>也可以手动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl rand -hex 32</span><br></pre></td></tr></table></figure>\n\n<p>来随机生成一段 32 字节的，然后放到<code>.env</code></p>\n<p>修改 <code>.env</code> 的方法有很多，例如，我们可以通过 <code>cp</code> 将容器中的 <code>.env</code> 拷贝出来到宿主机修改后再拷贝回去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> docker <span class=\"built_in\">cp</span> &lt; 皮肤站容器名 &gt;:/var/www/blessing-skin/.env ./bssenv</span><br><span class=\"line\">nano bssenv</span><br><span class=\"line\"><span class=\"comment\"># 在末尾换行，添加 JWT_SECRET=&lt; 你的随机字符 &gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Ctrl+O 进行保存，按下 enter 确认</span></span><br><span class=\"line\"><span class=\"comment\"># Ctrl+X 关闭</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> docker <span class=\"built_in\">cp</span> ./bssenv &lt; 皮肤站容器名 &gt;:/var/www/blessing-skin/.env</span><br></pre></td></tr></table></figure>\n\n<p>然后连接进入容器中输入以下命令刷新配置缓存或重启容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan config:clear</span><br><span class=\"line\">php artisan cache:clear</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外网访问与 https 配置\"><a href=\"# 外网访问与 https 配置\" class=\"headerlink\" title=\"外网访问与 https 配置\"></a>外网访问与 https 配置 </h2><p> 要实现外网可以使用 <code>https</code> 访问我们的皮肤站，我们需要 <code>ssl</code> 证书。至于如何让外网能够访问，有很多方法。这里由于我的皮肤站部署在我的本地物理机，使用的是通过 <code>frp</code>，将流量转发到<code>vps</code> 的方法物理机 -<code>vps</code>这一段我使用的是 <code>frp</code> 自带的加密，这里讨论的是外网 -<code>vps</code>的这段。</p>\n<p>我选择 <code>nginx</code> 反向代理 +<code>Let&#39;s Encrypt</code>签发证书</p>\n<p>这个的教程很多，我这里就不再赘述。</p>\n<blockquote>\n<p>[!NOTE]</p>\n<p>如果你打算使用非默认端口 <code>443</code> 进行 <code>https</code> 访问的话：</p>\n<ul>\n<li>记得将 <code>nginx</code> 的配置文件里 <code>ssl</code> 监听端口的那个 <code>443</code> 改为你打算使用的端口</li>\n<li><code>proxy_set_header Host $host;</code>这里，将 <code>$host</code> 改为 <code>$http_host</code>，否则不会将端口传下去，从而导致在试图<code>https</code> 访问皮肤站时，出现“发送了无效的响应 <code>ERR_SSL_PROTOCOL_ERROR</code>”</li>\n</ul>\n</blockquote>\n<h1 id=\"完成\"><a href=\"# 完成\" class=\"headerlink\" title=\"完成\"></a>完成 </h1><p> 至此，一个基本可用的 Blessing Skin Server 就搭建完成了。</p>\n<p>后续可以在管理面板里安装插件、美化主题，或者接入外部认证系统。</p>\n<h2 id=\"相关链接\"><a href=\"# 相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><p> <a href=\"https://blessing.netlify.app/\">Blessing Skin 手册 | Blessing Skin 用户手册</a></p>\n<p><a href=\"https://blessing.netlify.app/yggdrasil-api/\">Yggdrasil API | Blessing Skin 用户手册</a></p>\n<p><a href=\"https://hub.docker.com/r/feilongproject/blessing-skin-server\">feilongproject&#x2F;blessing-skin-server - Docker Image | Docker Hub</a></p>\n","url":"/posts/3/","min2read":5,"word4post":"1.5k","prev_post":null,"next_post":{"title":"Minecraft 纯萌新入坑指南","url":"/posts/2/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"前言\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"正文\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">正文 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"部署容器\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\"> 部署容器 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"常见配置调整\" href = \"#\"><span class=\"toc-number\">2.2.</span> <span class=\"toc-text\">常见配置调整 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"插件市场链接修改\" href = \"#\"><span class=\"toc-number\">2.2.1.</span> <span class=\"toc-text\"> 插件市场链接修改 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"设置 JWT-SECRET\" href = \"#\"><span class=\"toc-number\">2.2.2.</span> <span class=\"toc-text\">设置 JWT_SECRET</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"外网访问与 https 配置\" href = \"#\"><span class=\"toc-number\">2.3.</span> <span class=\"toc-text\">外网访问与 https 配置 </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"完成\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\">完成 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"相关链接\" href = \"#\"><span class=\"toc-number\">3.1.</span> <span class=\"toc-text\">相关链接</span></a></li></ol></li></ol>","categories":[{"name":"Minecraft","path":"api/categories/Minecraft.json","url":"/categories/Minecraft/"}],"tags":[{"name":"Minecraft","path":"api/tags/Minecraft.json","url":"/tags/Minecraft/"},{"name":"Guide","path":"api/tags/Guide.json","url":"/tags/Guide/"},{"name":"BSS","path":"api/tags/BSS.json","url":"/tags/BSS/"},{"name":"Docker","path":"api/tags/Docker.json","url":"/tags/Docker/"}]}